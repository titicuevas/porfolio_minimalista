---
import { basics } from "@cv"
import ThemeSwitcher from "@/components/ThemeSwitcher.astro"

interface Props {
  title: string
}

const { title } = Astro.props

const { image, summary, url } = basics
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <title>{title}</title>
    <meta name="description" content={summary} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preload" as="image" href={image} />

    <meta property="og:url" content={url} />
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={summary} />
    <meta property="og:image" content="" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta property="twitter:domain" content={url.split("//")[1] ?? ''} />
    <meta property="twitter:url" content={url} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={summary} />
    <meta name="twitter:image" content="" />
  </head>
  <body>
    <ThemeSwitcher />
    <slot />
  </body>
</html>

<style is:global>
  /*
   * Remove all animations and transitions for people that prefer not to see them
   */
  :root {
    /* Light theme variables */
    --bg-color: #F5F5F5;
    --text-color: #121212;
    --primary-color: #2563eb;
    --card-bg-color: #FFFFFF;
    --card-border-color: #E0E0E0;
    --accent-color: #38bdf8;
  }

  html.dark {
    /* Dark theme variables */
    --bg-color: #121212;
    --text-color: #E0E0E0;
    --primary-color: #3b82f6;
    --card-bg-color: #1E1E1E;
    --card-border-color: #2c2c2c;
  }

  html {
    font-family: "Onest Variable", system-ui, sans-serif;
    scroll-behavior: smooth;
    background: var(--bg-color);
    color: var(--text-color);
    letter-spacing: -0.025rem;
  }

  body,
  figure {
    margin: 0;
    padding: 0;
  }

  a {
    text-decoration: none;
  }

  ul {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  h1,
  h2,
  h3,
  h4 {
    margin: 0;
    color: var(--heading-color);
    font-family:
      system-ui,
      -apple-system,
      BlinkMacSystemFont,
      "Segoe UI",
      Roboto,
      Oxygen,
      Ubuntu,
      Cantarell,
      "Open Sans",
      "Helvetica Neue",
      sans-serif;
  }

  p {
    color: var(--text-color);
    font-size: 0.9rem;
    line-height: 1.5;
    margin: 0;
    text-wrap: pretty;
  }

  .print {
    display: none !important;
  }

  @media print {
    .no-print {
      display: none !important;
    }

    .print {
      display: block !important;
    }

    astro-dev-toolbar {
      display: none !important;
    }

    article {
      break-inside: avoid;
    }
  }

  /* Animación de entrada para secciones */
  .fade-section {
    opacity: 0;
    transform: translateY(80px);
    transition: opacity 0.7s cubic-bezier(0.17, 0.55, 0.55, 1), transform 0.7s cubic-bezier(0.17, 0.55, 0.55, 1);
    will-change: opacity, transform;
  }
  .fade-section.visible {
    opacity: 1;
    transform: translateY(0);
  }
</style>

<script>
  // Animación de fade-in para secciones
  window.addEventListener('DOMContentLoaded', () => {
    const sections = document.querySelectorAll('.fade-section');
    const observer = new window.IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0.15 });
    sections.forEach(section => observer.observe(section));
  });
</script>
